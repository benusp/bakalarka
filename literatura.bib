@article{Box2005,
author = {Box, P O},
file = {:D$\backslash$:/Down/01609096.pdf:pdf},
isbn = {0780391012},
pages = {30--35},
title = {{Scott Barela}},
year = {2005}
}
@book{Dictionary,
annote = {strana 196, ľav{\'{y}} stĺpec, cit{\'{a}}cia system testing},
author = {Dictionary, Standard Computer},
file = {:D$\backslash$:/Skola/Bc/182763.pdf:pdf},
isbn = {1559370793},
keywords = {definitions,dictionary,glossary,library of congress catalog,number 90-086306,terminology},
title = {{Standard Computer Dictionary}}
}
@article{Kaner2006,
author = {Kaner, Cem},
file = {:D$\backslash$:/Down/ETatQAI.pdf:pdf},
journal = {Quality Assurance International},
number = {c},
title = {{Exploratory Testing}},
year = {2006}
}
@article{Kuhn2004,
abstract = {Exhaustive testing of computer software is intractable, but empirical studies of software failures suggest that testing can in some cases be effectively exhaustive. Data reported in this study and others show that software failures in a variety of domains were caused by combinations of relatively few conditions. These results have important implications for testing. If all faults in a system can be triggered by a combination of n or fewer parameters, then testing all n-tuples of parameters is effectively equivalent to exhaustive testing, if software behavior is not dependent on complex event sequences and variables have a small set of discrete values. Index},
author = {Kuhn, D.R. and Wallace, D.R. and a.M. Gallo},
doi = {10.1109/TSE.2004.24},
file = {:D$\backslash$:/Skola/Bc/Software Fault Interactions and.pdf:pdf},
isbn = {9780470404447},
issn = {0098-5589},
journal = {IEEE Transactions on Software Engineering},
number = {6},
pages = {418--421},
title = {{Software fault interactions and implications for software testing}},
volume = {30},
year = {2004}
}
@article{Xu2008,
author = {Xu, Xiaofeng and Chen, Yan},
file = {:D$\backslash$:/Down/04688344.pdf:pdf},
journal = {International Conference on Anti-counterfeiting, Security and Identification},
keywords = {-automatic software testing,affinity function,clonal selection,cs,path-oriented test data generation},
pages = {63--66},
title = {{A Path-Oriented Test Data Generation Approach for Automatic Software Testing}},
year = {2008}
}
@article{Veenendaal2010,
annote = {strana 10 - acceptance testing},
author = {Veenendaal, E. V},
file = {:D$\backslash$:/Skola/Bc/ISTQB{\_}Glossary{\_}of{\_}Testing{\_}Terms{\_}2-1.pdf:pdf},
journal = {International Software Testing Qualification Board},
pages = {1--51},
title = {{Standard glossary of terms used in Software Testing, Version 1.2}},
volume = {1},
year = {2010}
}
@book{EST2002, author = {Elfriede Dustin}, isbn = {0-201-79429-2}, title = {Effective Software Testing: 50 specific ways to improve your testing},year = {2002}}